name: Build and Deploy Code

on: [push, pull_request]

jobs:
  Build:
    environment:
      name: testing
    env:
      DATABASE_HOSTNAME: ${{ secrets.DATABASE_HOSTNAME }}
      DATABASE_PORT: ${{ secrets.DATABASE_PORT }}
      DATABASE_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
      DATABASE_NAME: ${{ secrets.DATABASE_NAME }}
      DATABASE_USERNAME: ${{ secrets.DATABASE_USERNAME }}
      SECRET_KEY: ${{ secrets.SECRET_KEY }}
      ALGORITHM: ${{ secrets.ALGORITHM }}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{ secrets.ACCESS_TOKEN_EXPIRE_MINUTES }}

    services:
      postgres:
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{ secrets.DATABASE_PASSWORD }}
          POSTGRES_DB: ${{ secrets.DATABASE_NAME }}_test
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    steps:
      - name: pulling git repo
        uses: actions/checkout@v5

      - name: installing python
        uses: actions/setup-python@v6
        with:
          python-version: '3.11'

      - name: upgrading pip
        run: python -m pip install --upgrade pip

      - name: installing requirements
        run: pip install -r requirements.txt

      - name: running tests with pytest
        run: |
          pip install pytest
          pytest

      
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{ secrets.DOCKERHUB_USERNAME }}
      #     password: ${{ secrets.DOCKERHUB_TOKEN }}

      # - name: Set up Docker Buildx
      #   id: buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Build and push
      #   id: docker_build
      #   uses: docker/build-push-action@v5
      #   with:
      #     context: .
      #     file: ./Dockerfile
      #     push: true
      #     tags: ${{ secrets.DOCKERHUB_USERNAME }}/fastapi:latest
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     cache-to: type=local,dest=/tmp/.buildx-cache

      # - name: Image digest
      #   run: echo ${{ steps.docker_build.outputs.digest }}

  deploy:
    needs: Build
    runs-on: ubuntu-latest
    environment:
      name: production
    steps:
      - name: pulling git repo
        uses: actions/checkout@v5

      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh
      # using heroku deployment

      - name: Deploy to Heroku
        uses: akhilesh152/heroku-deploy@v2.0.0
        with:
          email: ${{ secrets.HEROKU_EMAIL }}
          api_key: ${{ secrets.HEROKU_API_KEY }}
          app_name: ${{ secrets.HEROKU_APP_NAME }}

      # - name: Deploy to heroku
      #   #uses: akhileshns/heroku-deploy@v3.12.12
      #   with:
      #     heroku_api_key: ${{secrets.HEROKU_API_KEY}}
      #     heroku_app_name: ${{secrets.HEROKU_APP_NAME}}
      #     heroku_email: ${{secrets.HEROKU_EMAIL}}
      #     usedocker: false

      # using Docker deployment
      # - name: Deploy to Heroku (Docker)
      #   uses: gonuit/heroku-docker-deploy@v1.3.3
      #   with:
      #     email: ${{ secrets.HEROKU_EMAIL }}
      #     api_key: ${{ secrets.HEROKU_API_KEY }}
      #     app_name: ${{ secrets.HEROKU_APP_NAME }}
      #     dockerfile_path: ./Dockerfile






